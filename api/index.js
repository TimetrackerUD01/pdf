const express = require('express');
const multer = require('multer');
const path = require('path');
const cors = require('cors');
const { PDFDocument } = require('pdf-lib');
const sharp = require('sharp');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../public')));

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÉ‡∏ä‡πâ memory storage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel)
const storage = multer.memoryStorage();
const upload = multer({ 
    storage: storage,
    limits: { fileSize: 10 * 1024 * 1024 }, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 10MB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
    fileFilter: (req, file, cb) => {
        const allowedTypes = [
            'application/pdf',
            'image/jpeg',
            'image/png',
            'image/gif',
            'text/plain'
        ];
        
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ PDF, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, ‡πÅ‡∏•‡∏∞ Text)'), false);
        }
    }
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ status: 'OK', message: 'API is working' });
});

// Route ‡∏´‡∏•‡∏±‡∏Å - ‡∏™‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤ index.html (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö local development)
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, '../public/index.html'));
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô PDF (‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ö‡∏ô Vercel)
app.post('/image-to-pdf', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û' });
        }

        const imageBuffer = req.file.buffer;
        const originalName = req.file.originalname;
        
        console.log(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ${originalName}`);

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô PDF
        const processedImage = await sharp(imageBuffer)
            .resize(800, 1000, { fit: 'inside', withoutEnlargement: true })
            .jpeg({ quality: 90 })
            .toBuffer();
        
        const pdfDoc = await PDFDocument.create();
        const page = pdfDoc.addPage();
        const jpgImage = await pdfDoc.embedJpg(processedImage);
        const { width, height } = page.getSize();
        const imgDims = jpgImage.scale(Math.min(width / jpgImage.width, height / jpgImage.height));
        
        page.drawImage(jpgImage, {
            x: (width - imgDims.width) / 2,
            y: (height - imgDims.height) / 2,
            width: imgDims.width,
            height: imgDims.height,
        });
        
        const pdfBytes = await pdfDoc.save();
        const outputFileName = originalName.replace(/\.[^/.]+$/, '.pdf');
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(outputFileName)}"`);
        res.send(Buffer.from(pdfBytes));

    } catch (error) {
        console.error('Image conversion error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: ' + error.message 
        });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á Text ‡πÄ‡∏õ‡πá‡∏ô PDF
app.post('/text-to-pdf', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå text' });
        }

        const textContent = req.file.buffer.toString('utf8');
        const originalName = req.file.originalname;
        
        const pdfDoc = await PDFDocument.create();
        const page = pdfDoc.addPage();
        const { width, height } = page.getSize();
        
        // ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
        const lines = textContent.split('\n');
        const fontSize = 12;
        const lineHeight = fontSize * 1.2;
        let yPosition = height - 50;
        
        for (const line of lines) {
            if (yPosition < 50) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏´‡∏°‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
                const newPage = pdfDoc.addPage();
                yPosition = height - 50;
                newPage.drawText(line, {
                    x: 50,
                    y: yPosition,
                    size: fontSize,
                    maxWidth: width - 100,
                });
            } else {
                page.drawText(line, {
                    x: 50,
                    y: yPosition,
                    size: fontSize,
                    maxWidth: width - 100,
                });
            }
            yPosition -= lineHeight;
        }
        
        const pdfBytes = await pdfDoc.save();
        const outputFileName = originalName.replace(/\.[^/.]+$/, '.pdf');
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(outputFileName)}"`);
        res.send(Buffer.from(pdfBytes));

    } catch (error) {
        console.error('Text conversion error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á text: ' + error.message 
        });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î PDF
app.post('/compress-pdf', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF' });
        }

        const pdfBuffer = req.file.buffer;
        const originalName = req.file.originalname;
        
        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF
        const pdfDoc = await PDFDocument.load(pdfBuffer);
        
        // ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û
        const compressedPdfBytes = await pdfDoc.save({
            useObjectStreams: false,
            addDefaultPage: false,
        });
        
        const compressedName = originalName.replace('.pdf', '_compressed.pdf');
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="${encodeURIComponent(compressedName)}"`);
        res.send(Buffer.from(compressedPdfBytes));

    } catch (error) {
        console.error('Compression error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: ' + error.message 
        });
    }
});

// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå PDF
app.post('/merge-pdf', upload.array('files', 10), async (req, res) => {
    try {
        if (!req.files || req.files.length < 2) {
            return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡πÑ‡∏ü‡∏•‡πå' });
        }

        const mergedPdf = await PDFDocument.create();
        
        for (const file of req.files) {
            const pdfBuffer = file.buffer;
            const pdf = await PDFDocument.load(pdfBuffer);
            const copiedPages = await mergedPdf.copyPages(pdf, pdf.getPageIndices());
            copiedPages.forEach((page) => mergedPdf.addPage(page));
        }
        
        const mergedPdfBytes = await mergedPdf.save();
        
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', 'attachment; filename="merged.pdf"');
        res.send(Buffer.from(mergedPdfBytes));

    } catch (error) {
        console.error('Merge error:', error);
        res.status(500).json({ 
            error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå: ' + error.message 
        });
    }
});

// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
app.get('/privacy', (req, res) => {
    res.sendFile(path.join(__dirname, 'privacy.html'));
});

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK', 
        message: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥',
        timestamp: new Date().toISOString(),
        features: [
            '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô PDF',
            'Text ‡πÄ‡∏õ‡πá‡∏ô PDF', 
            '‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î PDF',
            '‡∏£‡∏ß‡∏° PDF'
        ]
    });
});

// Error handling middleware
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ error: '‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (‡∏à‡∏≥‡∏Å‡∏±‡∏î 10MB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel)' });
        }
    }
    
    console.error('Server error:', error);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
});

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Vercel
module.exports = app;

// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô local
if (require.main === module) {
    app.listen(PORT, () => {
        console.log(`üöÄ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Vercel-ready ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`);
        console.log(`üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà: http://localhost:${PORT}`);
        console.log(`üî• ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ö‡∏ô Vercel:`);
        console.log(`   - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô PDF`);
        console.log(`   - Text ‡πÄ‡∏õ‡πá‡∏ô PDF`);
        console.log(`   - ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î PDF`);
        console.log(`   - ‡∏£‡∏ß‡∏° PDF`);
    });
}
